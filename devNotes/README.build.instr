# Helpful NOTES TO SELF for developer James Rowell.
#
# Regarding installing and/or testing latest versions of renumseq.
#
# Versions of renumseq prior to v1.4.0 had python_requires = '>=3.6, <4',
# renumseq v1.4.0 and later has            python_requires = '>=3.7, <4',
#
# If attempting to install renumseq on a system that only has python3.6
# available, then 'python3 -m pip install renumseq' will ONLY install
# the latest allowed by the above 'python_requires' constraint,
# that is, v1.3.2 will be installed.
#
# However if python3 links to python3.6, BUT say python3.7 (or higher)
# is installed then in the "First STEPS" (below), by explicitly 
# using (say) "python3.9" when installing "venv" then subsequent steps
# will install the latest renumseq in venv. For example,
#
#    $ cd $HOME
#    $ python3 --version
#    Python 3.6.8
#    $ ls /usr/bin/python3*
#    /usr/bin/python3    /usr/bin/python3.6m  /usr/bin/python3.9
#    /usr/bin/python3.6  /usr/bin/python3.8
#    $ python3.9 -m venv venv
#    $ source venv/bin/activate
#    $ python3 --version
#    Python 3.9.16
#    ...etc. as below
#
# This technique also works when installing sitewide as root in /usr/local/venv

cd $HOME
python3 --version

# First STEPS.
#
# If the system has upgraded the default 'python3' (from say 3.6 to 3.9)
# since the last time venv was created, then delete ~/venv, continue with
#
    python3 -m venv venv
    source venv/bin/activate
    python3 -m pip install --upgrade pip 
    python3 -m pip install --upgrade setuptools wheel
    python3 -m pip install --upgrade build
    python3 -m pip install --upgrade twine
# else
    source venv/bin/activate

cd <dirWithGitRepos>/renumSeq

# make sure the VERSION is set properly in renumseq/__main__.py, namely

    Given a version number MAJOR.MINOR.PATCH, increment the:

    MAJOR version for incompatible API changes
    MINOR version for added functionality in a backwards compatible manner
    PATCH version for backwards compatible bug fixes

# change the version to match in setup.py
cd tests
source setUpToTest.sourceMe
#
# Then proceed with code-dev, testing the command at will.
#
# run the tests - make sure everthing is OK
    and that the version in test_renumseq.out is updated
    for BOTH Darwin (MacOS) and Linux.

# If on Linux, then PUSH up to github, and pull down to macos and test before building
# and uploading to pypi

# IF on working branch FIRST merge it back to master
# UNLESS still testing with testpypi below, then wait
# until satisfied with all tests.

python3 -m build

[NOTE: As of 2024/05/14, when building v1.4.1, for some reason the .tar.gz file was
created with all lowercase (i.e., renumseq-1.4.1.tar.gz instead of renumSeq-1.4.1.tar.gz)
which broke my twine upload to pypi. So, until I figure out why this happened, manually
rename the file to be proper camelCase.]

# Change next line to whatever latest version is. Then use
# __token__ and password for PyPi account.
# ...or not needed if .pypirc is installed in $HOME
#
# TEST INSTALLATION testpypi
#
#   python3 -m twine upload --repository testpypi dist/renumseq-x.x.x*
#
# or FOR REAL
python3 -m twine upload --repository pypi dist/renumSeq-x.x.x*

# NOTE! Sometimes you have to wait 5 minutes or so for
# the update to take effect on the pipy server before the install
# below will pick up the latest version.

# Install it locally in venv,
    #
    # TEST (First one is for test.pypi - second is for non-test dependencies)
    #
    # python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ renumseq
    #
    # or the REAL one on pypi
    #
    python3 -m pip install renumseq

# or update it, append '--upgrade' to either of the above lines.

# Test installation.
# locally

# If was testing on branch and testpypi - MERGE back to MASTER and
# double check that version is correct (i.e., no extra trailing digits)
# Test on Dawin/Linux both

CHECK IN AN COMMIT ALL CHANGES AND PUSH UP TO GITHUB

MAKE NEW github RELEASE to match VERSION
